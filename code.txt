The following is a digest of the repository "NoShow-Extension".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: NoShow-Extension
Files Analyzed: 18
Total Text Size: 38.78 KB
Estimated Tokens (text only): ~9,669

--- DIRECTORY STRUCTURE ---
NoShow-Extension/
├── backend/
│   ├── config/
│   │   └── database.js
│   ├── db/
│   │   └── test.js
│   ├── middleware/
│   │   ├── authMiddleware.js
│   │   └── rbacMiddleware.js
│   ├── migrations/
│   │   ├── config/
│   │   │   └── config.json
│   │   ├── migrations/
│   │   │   ├── 20250728101937-create-user.js
│   │   │   ├── 20250728101942-create-candidate.js
│   │   │   └── 20250728101946-create-report.js
│   │   └── models/
│   │       ├── candidate.js
│   │       ├── index.js
│   │       ├── report.js
│   │       └── user.js
│   ├── routes/
│   │   ├── auth.js
│   │   ├── reports.js
│   │   └── user.js
│   ├── package.json
│   └── server.js
└── code.txt


--- FILE CONTENTS ---
============================================================
FILE: backend/config/database.js
============================================================
// backend/config/database.js
const { Sequelize } = require('sequelize');
require('dotenv').config();

const sequelize = new Sequelize(
  process.env.DB_NAME || 'noshow_dev',
  process.env.DB_USER || 'root',
  process.env.DB_PASSWORD || '',
  {
    host: process.env.DB_HOST || 'localhost',
    dialect: 'mysql',
    port: process.env.DB_PORT || 3306,
    dialectOptions: {
      decimalNumbers: true,
    },
    define: {
      timestamps: true,
      createdAt: 'created_at',
      updatedAt: 'updated_at'
    },
    pool: {
      max: 10,
      min: 0,
      acquire: 30000,
      idle: 10000
    },
    logging: process.env.NODE_ENV === 'development' ? console.log : false
  }
);

module.exports = sequelize;

============================================================
FILE: backend/db/test.js
============================================================
const db = require('./database');

async function testConnection() {
  try {
    await db.authenticate();
    console.log('MySQL connection successful!');
    
    const [results] = await db.query('SELECT NOW() AS current_time');
    console.log('Current MySQL time:', results[0].current_time);
  } catch (error) {
    console.error('MySQL connection failed:', error);
  } finally {
    await db.close();
  }
}

testConnection();

============================================================
FILE: backend/middleware/authMiddleware.js
============================================================
// backend/middleware/authMiddleware.js
const jwt = require('jsonwebtoken');
const { User } = require('../models');

module.exports = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      return res.status(401).json({ error: 'Authentication required' });
    }
    
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findByPk(decoded.id);
    
    if (!user) {
      return res.status(401).json({ error: 'Invalid user' });
    }
    
    req.user = user;
    next();
  } catch (error) {
    res.status(401).json({ error: 'Invalid or expired token' });
  }
};

============================================================
FILE: backend/middleware/rbacMiddleware.js
============================================================
// backend/middleware/rbacMiddleware.js
module.exports = (requiredRole) => {
  return (req, res, next) => {
    if (req.user.role !== requiredRole) {
      return res.status(403).json({ 
        error: `Requires ${requiredRole} privileges` 
      });
    }
    next();
  };
};

============================================================
FILE: backend/migrations/config/config.json
============================================================
{
  "development": {
    "username": "root",
    "password": "",
    "database": "NoShow",
    "host": "127.0.0.1",
    "dialect": "mysql",
    "port": 3306
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "NoShow",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "use_env_variable": "DATABASE_URL",
    "dialect": "mysql"
  }
}

============================================================
FILE: backend/migrations/migrations/20250728101937-create-user.js
============================================================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('users', {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true
      },
      linkedin_id: {
        type: Sequelize.STRING(255),
        allowNull: false,
        unique: true
      },
      email: {
        type: Sequelize.STRING(255),
        allowNull: false,
        unique: true
      },
      full_name: {
        type: Sequelize.STRING(255),
        allowNull: false
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP()')
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      }
    });
  },
  down: async (queryInterface) => {
    await queryInterface.dropTable('users');
  }
};

============================================================
FILE: backend/migrations/migrations/20250728101942-create-candidate.js
============================================================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('candidates', {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true
      },
      linkedin_id: {
      type: Sequelize.STRING(255),
      allowNull: false,
      unique: true,
      set(value) {
        this.setDataValue('linkedin_id', sequelize.fn('AES_ENCRYPT', value, process.env.ENCRYPTION_KEY));
      },
      get() {
        return sequelize.fn('AES_DECRYPT', this.getDataValue('linkedin_id'), process.env.ENCRYPTION_KEY);
      }
      },
      first_name: {
        type: Sequelize.STRING(255),
        allowNull: false
      },
      last_name: {
        type: Sequelize.STRING(255),
        allowNull: false
      },
      current_position: {
        type: Sequelize.STRING(255),
        allowNull: true
      },
      current_company: {
        type: Sequelize.STRING(255),
        allowNull: true
      },
      profile_url: {
        type: Sequelize.STRING(512),
        allowNull: false
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP()')
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      }
    });
  },

  down: async (queryInterface) => {
    await queryInterface.dropTable('candidates');
  }
};

============================================================
FILE: backend/migrations/migrations/20250728101946-create-report.js
============================================================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('reports', {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true
      },
      candidate_id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'candidates',
          key: 'id'
        },
        onDelete: 'CASCADE'
      },
      user_id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'users',
          key: 'id'
        },
        onDelete: 'CASCADE'
      },
      reason: {
        type: Sequelize.STRING(255),
        allowNull: false
      },
      notes: {
        type: Sequelize.TEXT,
        allowNull: true
      },
      tags: {
        type: Sequelize.JSON,
        allowNull: true
      },
      severity: {
        type: Sequelize.INTEGER,
        allowNull: false,
        defaultValue: 1
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP()')
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      }
    });

    // Add indexes for faster queries
    await queryInterface.addIndex('reports', ['candidate_id']);
    await queryInterface.addIndex('reports', ['user_id']);
    await queryInterface.addIndex('reports', ['created_at']);
    await queryInterface.addIndex('reports', ['reason', 'notes'], {
    type: 'FULLTEXT',
    name: 'reports_search_idx'
    });
  },

  down: async (queryInterface) => {
    await queryInterface.dropTable('reports');
  }
};

============================================================
FILE: backend/migrations/models/candidate.js
============================================================
// backend/models/candidate.js
module.exports = (sequelize, DataTypes) => {
  const Candidate = sequelize.define('Candidate', {
    linkedin_id: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true
    },
    first_name: {
      type: DataTypes.STRING,
      allowNull: false
    },
    last_name: {
      type: DataTypes.STRING,
      allowNull: false
    },
    current_position: {
      type: DataTypes.STRING,
      allowNull: true
    },
    current_company: {
      type: DataTypes.STRING,
      allowNull: true
    },
    profile_url: {
      type: DataTypes.STRING(512),
      allowNull: false
    },
    profile_pic: {
      type: DataTypes.STRING(512),
      allowNull: true
    }
  }, {
    tableName: 'candidates',
    underscored: true,
    timestamps: true,
    indexes: [
      {
        unique: true,
        fields: ['linkedin_id']
      },
      {
        fields: ['first_name', 'last_name']
      }
    ]
  });

  Candidate.associate = (models) => {
    Candidate.hasMany(models.Report, { 
      foreignKey: 'candidate_id',
      as: 'reports'
    });
  };

  return Candidate;
};

============================================================
FILE: backend/migrations/models/index.js
============================================================
'use strict';

const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const process = require('process');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';
const config = require(__dirname + '/../config/config.json')[env];
const db = {};

let sequelize;
if (config.use_env_variable) {
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}

fs
  .readdirSync(__dirname)
  .filter(file => {
    return (
      file.indexOf('.') !== 0 &&
      file !== basename &&
      file.slice(-3) === '.js' &&
      file.indexOf('.test.js') === -1
    );
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;


============================================================
FILE: backend/migrations/models/report.js
============================================================
// backend/models/report.js
module.exports = (sequelize, DataTypes) => {
  const Report = sequelize.define('Report', {
    reason: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        notEmpty: true
      }
    },
    notes: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    tags: {
      type: DataTypes.JSON,
      allowNull: true
    },
    severity: {
      type: DataTypes.INTEGER,
      allowNull: false,
      defaultValue: 1,
      validate: {
        min: 1,
        max: 5
      }
    },
    ip_address: {
      type: DataTypes.STRING(45),
      allowNull: true
    }
  }, {
    tableName: 'reports',
    underscored: true,
    timestamps: true,
    indexes: [
      {
        fields: ['created_at']
      },
      {
        fields: ['severity']
      }
    ]
  });

  Report.associate = (models) => {
    Report.belongsTo(models.User, { 
      foreignKey: 'user_id',
      as: 'reporter'
    });
    Report.belongsTo(models.Candidate, { 
      foreignKey: 'candidate_id',
      as: 'candidate'
    });
  };

  return Report;
};

============================================================
FILE: backend/migrations/models/user.js
============================================================
// backend/models/user.js
module.exports = (sequelize, DataTypes) => {
  const User = sequelize.define('User', {
    linkedin_id: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
      validate: {
        isEmail: true
      }
    },
    full_name: {
      type: DataTypes.STRING,
      allowNull: false
    },
    role: {
      type: DataTypes.ENUM('admin', 'recruiter'),
      defaultValue: 'recruiter'
    },
    access_token: {
      type: DataTypes.STRING(512),
      allowNull: true
    }
  }, {
    tableName: 'users',
    underscored: true,
    timestamps: true
  });

  User.associate = (models) => {
    User.hasMany(models.Report, { 
      foreignKey: 'user_id',
      as: 'reports'
    });
  };

  return User;
};

============================================================
FILE: backend/routes/auth.js
============================================================
// backend/routes/auth.js
const express = require('express');
const axios = require('axios');
const router = express.Router();
const jwt = require('jsonwebtoken');
const { User } = require('../models');
const { sequelize } = require('../config/database');

// LinkedIn OAuth configuration
const LINKEDIN_API = 'https://api.linkedin.com/v2';
const OAUTH_URL = 'https://www.linkedin.com/oauth/v2';

router.get('/linkedin', (req, res) => {
  const params = new URLSearchParams({
    response_type: 'code',
    client_id: process.env.LINKEDIN_CLIENT_ID,
    redirect_uri: process.env.LINKEDIN_REDIRECT_URI,
    scope: 'r_liteprofile r_emailaddress',
    state: Math.random().toString(36).substring(7)
  });
  
  res.redirect(`${OAUTH_URL}/authorization?${params}`);
});

router.get('/linkedin/callback', async (req, res) => {
  try {
    const { code, state } = req.query;
    
    // Exchange code for access token
    const tokenResponse = await axios.post(`${OAUTH_URL}/accessToken`, null, {
      params: {
        grant_type: 'authorization_code',
        code,
        redirect_uri: process.env.LINKEDIN_REDIRECT_URI,
        client_id: process.env.LINKEDIN_CLIENT_ID,
        client_secret: process.env.LINKEDIN_CLIENT_SECRET
      },
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    });

    const { access_token, expires_in } = tokenResponse.data;
    
    // Get user profile
    const profileResponse = await axios.get(`${LINKEDIN_API}/me`, {
      headers: {
        Authorization: `Bearer ${access_token}`
      },
      params: {
        projection: '(id,localizedFirstName,localizedLastName)'
      }
    });

    // Get user email
    const emailResponse = await axios.get(`${LINKEDIN_API}/emailAddress?q=members&projection=(elements*(handle~))`, {
      headers: {
        Authorization: `Bearer ${access_token}`
      }
    });

    const { id, localizedFirstName, localizedLastName } = profileResponse.data;
    const email = emailResponse.data.elements[0]['handle~'].emailAddress;
    const fullName = `${localizedFirstName} ${localizedLastName}`;

    // Create or update user
    const [user, created] = await User.findOrCreate({
      where: { linkedin_id: id },
      defaults: {
        email,
        full_name: fullName,
        access_token
      }
    });

    if (!created) {
      await user.update({ access_token });
    }

    // Generate JWT
    const token = jwt.sign(
      { id: user.id, role: user.role, email: user.email }, 
      process.env.JWT_SECRET, 
      { expiresIn: '1h' }
    );

    // Redirect to frontend with token
    res.redirect(`${process.env.FRONTEND_URL}/auth-success?token=${token}`);
  } catch (error) {
    console.error('OAuth error:', error.response?.data || error.message);
    res.redirect(`${process.env.FRONTEND_URL}/auth-error`);
  }
});

module.exports = router;

============================================================
FILE: backend/routes/reports.js
============================================================
// backend/routes/reports.js
const express = require('express');
const { body, query } = require('express-validator');
const { Report, Candidate, User } = require('../models');
const authMiddleware = require('../middleware/authMiddleware');
const rbacMiddleware = require('../middleware/rbacMiddleware');
const router = express.Router();

// Get all reports (with pagination and filters)
router.get('/', [
  authMiddleware,
  query('page').optional().isInt({ min: 1 }).toInt(),
  query('limit').optional().isInt({ min: 1, max: 100 }).toInt(),
  query('severity').optional().isInt({ min: 1, max: 5 }).toInt()
], async (req, res) => {
  try {
    const page = req.query.page || 1;
    const limit = req.query.limit || 20;
    const offset = (page - 1) * limit;
    
    const where = {};
    if (req.query.severity) where.severity = req.query.severity;
    if (req.query.candidate_id) where.candidate_id = req.query.candidate_id;
    
    const { count, rows } = await Report.findAndCountAll({
      where,
      include: [
        { model: Candidate, as: 'candidate' },
        { model: User, as: 'reporter', attributes: ['id', 'full_name', 'email'] }
      ],
      order: [['created_at', 'DESC']],
      limit,
      offset
    });
    
    res.json({
      data: rows,
      meta: {
        total: count,
        page,
        totalPages: Math.ceil(count / limit)
      }
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Create new report
router.post('/', [
  authMiddleware,
  body('candidate_id').isInt().notEmpty(),
  body('reason').isString().notEmpty(),
  body('severity').isInt({ min: 1, max: 5 })
], async (req, res) => {
  try {
    const report = await Report.create({
      candidate_id: req.body.candidate_id,
      user_id: req.user.id,
      reason: req.body.reason,
      notes: req.body.notes,
      tags: req.body.tags,
      severity: req.body.severity,
      ip_address: req.headers['x-forwarded-for'] || req.socket.remoteAddress
    });
    
    // Fetch full report with relationships
    const fullReport = await Report.findByPk(report.id, {
      include: [
        { model: Candidate, as: 'candidate' },
        { model: User, as: 'reporter' }
      ]
    });
    
    res.status(201).json(fullReport);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// CSV Export
router.get('/export', [
  authMiddleware,
  rbacMiddleware('admin')
], async (req, res) => {
  try {
    const reports = await Report.findAll({
      include: [
        { model: Candidate, as: 'candidate' },
        { model: User, as: 'reporter' }
      ]
    });
    
    let csv = 'ID,Candidate Name,Reporter,Reason,Severity,Date\n';
    reports.forEach(report => {
      csv += `"${report.id}","${report.candidate.first_name} ${report.candidate.last_name}",`;
      csv += `"${report.reporter.full_name}","${report.reason}",`;
      csv += `"${report.severity}","${report.created_at.toISOString()}"\n`;
    });
    
    res.header('Content-Type', 'text/csv');
    res.attachment('reports.csv');
    res.send(csv);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

============================================================
FILE: backend/routes/user.js
============================================================
// backend/routes/users.js
const express = require('express');
const { User } = require('../models');
const authMiddleware = require('../middleware/authMiddleware');
const rbacMiddleware = require('../middleware/rbacMiddleware');
const router = express.Router();

// Get current user profile
router.get('/me', authMiddleware, async (req, res) => {
  try {
    const user = await User.findByPk(req.user.id, {
      attributes: { exclude: ['access_token'] }
    });
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Admin: List all users
router.get('/', [
  authMiddleware,
  rbacMiddleware('admin')
], async (req, res) => {
  try {
    const users = await User.findAll({
      attributes: ['id', 'email', 'full_name', 'role', 'created_at']
    });
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

============================================================
FILE: backend/package.json
============================================================
{
  "name": "backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest",
    "migrate": "sequelize-cli db:migrate",
    "seed": "sequelize-cli db:seed:all"
  },
  "dependencies": {
    "axios": "^1.7.2",
    "bcrypt": "^5.1.1",
    "cors": "^2.8.5",
    "dotenv": "^17.2.1",
    "express": "^5.1.0",
    "express-rate-limit": "^7.1.3",
    "express-validator": "^7.0.1",
    "helmet": "^8.1.0",
    "jsonwebtoken": "^9.0.2",
    "mysql2": "^3.14.2",
    "sequelize": "^6.37.7"
  },
  "devDependencies": {
    "jest": "^30.0.5",
    "nodemon": "^3.1.10",
    "sequelize-cli": "^6.6.1"
  }
}

============================================================
FILE: backend/server.js
============================================================
// backend/server.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const { sequelize } = require('./config/database');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Test database connection
sequelize.authenticate()
  .then(() => console.log('MySQL connection established'))
  .catch(err => console.error('MySQL connection error:', err));

// Sync models (remove force:true in production)
sequelize.sync({ force: process.env.NODE_ENV === 'development' })
  .then(() => console.log('Database synchronized'))
  .catch(err => console.error('Database sync error:', err));

// Security middleware
app.use(helmet());
app.use(cors({
  origin: process.env.FRONTEND_URL || '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE']
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});
app.use(limiter);

// Body parser
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Routes
app.get('/', (req, res) => {
  res.json({ 
    message: 'NoShow API', 
    version: '1.0',
    environment: process.env.NODE_ENV || 'development'
  });
});

app.use('/api/auth', require('./routes/auth'));
app.use('/api/reports', require('./routes/reports'));
app.use('/api/users', require('./routes/users'));

// Error handling
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error' });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

============================================================
FILE: code.txt
============================================================
The following is a digest of the repository "NoShow-Extension".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: NoShow-Extension
Files Analyzed: 15
Total Text Size: 15.59 KB
Estimated Tokens (text only): ~4,182

--- DIRECTORY STRUCTURE ---
NoShow-Extension/
├── backend/
│   ├── config/
│   │   └── database.js
│   ├── db/
│   │   └── test.js
│   ├── migrations/
│   │   ├── config/
│   │   │   └── config.json
│   │   ├── migrations/
│   │   │   ├── 20250728101937-create-user.js
│   │   │   ├── 20250728101942-create-candidate.js
│   │   │   └── 20250728101946-create-report.js
│   │   └── models/
│   │       ├── candidate.js
│   │       ├── index.js
│   │       ├── report.js
│   │       └── user.js
│   ├── routes/
│   │   ├── auth.js
│   │   └── reports.js
│   ├── package.json
│   └── server.js
└── code.txt


--- FILE CONTENTS ---
============================================================
FILE: backend/config/database.js
============================================================
const { Sequelize } = require('sequelize');

const sequelize = new Sequelize(
  process.env.DB_NAME || 'noshow_dev',
  process.env.DB_USER || 'root',
  process.env.DB_PASSWORD || '',
  {
    host: process.env.DB_HOST || 'localhost',
    dialect: 'mysql',
    port: process.env.DB_PORT || 3306,
    define: {
      timestamps: true,
      createdAt: 'created_at',
      updatedAt: 'updated_at'
    }
  }
);

module.exports = sequelize;

============================================================
FILE: backend/db/test.js
============================================================
const db = require('./database');

async function testConnection() {
  try {
    await db.authenticate();
    console.log('MySQL connection successful!');
    
    const [results] = await db.query('SELECT NOW() AS current_time');
    console.log('Current MySQL time:', results[0].current_time);
  } catch (error) {
    console.error('MySQL connection failed:', error);
  } finally {
    await db.close();
  }
}

testConnection();

============================================================
FILE: backend/migrations/config/config.json
============================================================
{
  "development": {
    "username": "root",
    "password": "",
    "database": "NoShow",
    "host": "127.0.0.1",
    "dialect": "mysql",
    "port": 3306
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "NoShow",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "use_env_variable": "DATABASE_URL",
    "dialect": "mysql"
  }
}

============================================================
FILE: backend/migrations/migrations/20250728101937-create-user.js
============================================================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('users', {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true
      },
      linkedin_id: {
        type: Sequelize.STRING(255),
        allowNull: false,
        unique: true
      },
      email: {
        type: Sequelize.STRING(255),
        allowNull: false,
        unique: true
      },
      full_name: {
        type: Sequelize.STRING(255),
        allowNull: false
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      }
    });
  },

  down: async (queryInterface) => {
    await queryInterface.dropTable('users');
  }
};

============================================================
FILE: backend/migrations/migrations/20250728101942-create-candidate.js
============================================================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('candidates', {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true
      },
      linkedin_id: {
        type: Sequelize.STRING(255),
        allowNull: false,
        unique: true
      },
      first_name: {
        type: Sequelize.STRING(255),
        allowNull: false
      },
      last_name: {
        type: Sequelize.STRING(255),
        allowNull: false
      },
      current_position: {
        type: Sequelize.STRING(255),
        allowNull: true
      },
      current_company: {
        type: Sequelize.STRING(255),
        allowNull: true
      },
      profile_url: {
        type: Sequelize.STRING(512),
        allowNull: false
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      }
    });
  },

  down: async (queryInterface) => {
    await queryInterface.dropTable('candidates');
  }
};

============================================================
FILE: backend/migrations/migrations/20250728101946-create-report.js
============================================================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('reports', {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true
      },
      candidate_id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'candidates',
          key: 'id'
        },
        onDelete: 'CASCADE'
      },
      user_id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'users',
          key: 'id'
        },
        onDelete: 'CASCADE'
      },
      reason: {
        type: Sequelize.STRING(255),
        allowNull: false
      },
      notes: {
        type: Sequelize.TEXT,
        allowNull: true
      },
      tags: {
        type: Sequelize.JSON,
        allowNull: true
      },
      severity: {
        type: Sequelize.INTEGER,
        allowNull: false,
        defaultValue: 1
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      }
    });

    // Add indexes for faster queries
    await queryInterface.addIndex('reports', ['candidate_id']);
    await queryInterface.addIndex('reports', ['user_id']);
    await queryInterface.addIndex('reports', ['created_at']);
  },

  down: async (queryInterface) => {
    await queryInterface.dropTable('reports');
  }
};

============================================================
FILE: backend/migrations/models/candidate.js
============================================================
module.exports = (sequelize, DataTypes) => {
  const Candidate = sequelize.define('Candidate', {
    linkedin_id: DataTypes.STRING,
    first_name: DataTypes.STRING,
    last_name: DataTypes.STRING,
    current_position: DataTypes.STRING,
    current_company: DataTypes.STRING,
    profile_url: DataTypes.STRING
  }, {
    tableName: 'candidates',
    underscored: true,
    timestamps: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at'
  });

  Candidate.associate = (models) => {
    Candidate.hasMany(models.Report, { foreignKey: 'candidate_id' });
  };

  return Candidate;
};

============================================================
FILE: backend/migrations/models/index.js
============================================================
'use strict';

const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const process = require('process');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';
const config = require(__dirname + '/../config/config.json')[env];
const db = {};

let sequelize;
if (config.use_env_variable) {
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}

fs
  .readdirSync(__dirname)
  .filter(file => {
    return (
      file.indexOf('.') !== 0 &&
      file !== basename &&
      file.slice(-3) === '.js' &&
      file.indexOf('.test.js') === -1
    );
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;


============================================================
FILE: backend/migrations/models/report.js
============================================================
module.exports = (sequelize, DataTypes) => {
  const Report = sequelize.define('Report', {
    reason: DataTypes.STRING,
    notes: DataTypes.TEXT,
    tags: DataTypes.JSON,
    severity: DataTypes.INTEGER
  }, {
    tableName: 'reports',
    underscored: true,
    timestamps: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at'
  });

  Report.associate = (models) => {
    Report.belongsTo(models.User, { foreignKey: 'user_id' });
    Report.belongsTo(models.Candidate, { foreignKey: 'candidate_id' });
  };

  return Report;
};

============================================================
FILE: backend/migrations/models/user.js
============================================================
module.exports = (sequelize, DataTypes) => {
  const User = sequelize.define('User', {
    linkedin_id: DataTypes.STRING,
    email: DataTypes.STRING,
    full_name: DataTypes.STRING
  }, {
    tableName: 'users',
    underscored: true,
    timestamps: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at'
  });

  User.associate = (models) => {
    User.hasMany(models.Report, { foreignKey: 'user_id' });
  };

  return User;
};

============================================================
FILE: backend/routes/auth.js
============================================================
// backend/routes/auth.js
const express = require('express');
const router = express.Router();

// Initier l'authentification LinkedIn
router.get('/linkedin', (req, res) => {
    const authUrl = `https://www.linkedin.com/oauth/v2/authorization?` +
        `response_type=code&` +
        `client_id=${process.env.LINKEDIN_CLIENT_ID}&` +
        `redirect_uri=${process.env.LINKEDIN_REDIRECT_URI}&` +
        `scope=r_liteprofile%20r_emailaddress`;
    res.redirect(authUrl);
});

// Callback OAuth
router.get('/linkedin/callback', async (req, res) => {
    // Échange du code contre un token
    // Récupération du profil utilisateur
    // Création/mise à jour de l'utilisateur en base
    // Génération JWT token
    // Redirection vers frontend
});

module.exports = router;

============================================================
FILE: backend/routes/reports.js
============================================================
// backend/routes/reports.js
const express = require('express');
const router = express.Router();
const db = require('../config/database');

// GET /api/reports - Liste des signalements
router.get('/', async (req, res) => {
    try {
        const result = await db.query(`
            SELECT r.*, c.first_name, c.last_name, c.current_position, u.full_name as reporter_name
            FROM reports r
            JOIN candidates c ON r.candidate_id = c.id
            JOIN users u ON r.user_id = u.id
            ORDER BY r.created_at DESC
        `);
        res.json(result.rows);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// POST /api/reports - Créer un signalement
router.post('/', async (req, res) => {
    try {
        const { candidate_id, user_id, reason, notes, tags, severity } = req.body;
        const result = await db.query(`
            INSERT INTO reports (candidate_id, user_id, reason, notes, tags, severity)
            VALUES ($1, $2, $3, $4, $5, $6)
            RETURNING *
        `, [candidate_id, user_id, reason, notes, JSON.stringify(tags), severity]);
        
        res.status(201).json(result.rows[0]);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

'use strict';
module.exports = (sequelize, DataTypes) => {
  const Report = sequelize.define('Report', {
    reason: DataTypes.STRING,
    notes: DataTypes.TEXT,
    tags: DataTypes.JSON,
    severity: DataTypes.INTEGER
  }, {});
  Report.associate = function(models) {
    Report.belongsTo(models.User, { foreignKey: 'userId' });
    Report.belongsTo(models.Candidate, { foreignKey: 'candidateId' });
  };
  return Report;
};

============================================================
FILE: backend/package.json
============================================================
{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^17.2.1",
    "express": "^5.1.0",
    "helmet": "^8.1.0",
    "mysql2": "^3.14.2",
    "sequelize": "^6.37.7"
  },
  "devDependencies": {
    "jest": "^30.0.5",
    "nodemon": "^3.1.10"
  }
}


============================================================
FILE: backend/server.js
============================================================
// backend/server.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

app.use(helmet());
app.use(cors());
app.use(express.json());

// Routes de base
app.get('/', (req, res) => {
    res.json({ message: 'NoShow API Running' });
});
// Routes API
app.use('/api/auth', require('./routes/auth'));
app.use('/api/reports', require('./routes/reports'));
app.use('/api/users', require('./routes/users'));

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

============================================================
FILE: code.txt
============================================================
The following is a digest of the repository "NoShow-Extension.git".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: NoShow-Extension.git
Files Analyzed: 5
Total Text Size: 3.26 KB
Estimated Tokens (text only): ~997

--- DIRECTORY STRUCTURE ---
NoShow-Extension.git/
└── backend/
    ├── config/
    │   └── database.js
    ├── routes/
    │   ├── auth.js
    │   └── reports.js
    ├── package.json
    └── server.js


--- FILE CONTENTS ---
============================================================
FILE: backend/config/database.js
============================================================
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

module.exports = pool;

============================================================
FILE: backend/routes/auth.js
============================================================
// backend/routes/auth.js
const express = require('express');
const router = express.Router();

// Initier l'authentification LinkedIn
router.get('/linkedin', (req, res) => {
    const authUrl = `https://www.linkedin.com/oauth/v2/authorization?` +
        `response_type=code&` +
        `client_id=${process.env.LINKEDIN_CLIENT_ID}&` +
        `redirect_uri=${process.env.LINKEDIN_REDIRECT_URI}&` +
        `scope=r_liteprofile%20r_emailaddress`;
    res.redirect(authUrl);
});

// Callback OAuth
router.get('/linkedin/callback', async (req, res) => {
    // Échange du code contre un token
    // Récupération du profil utilisateur
    // Création/mise à jour de l'utilisateur en base
    // Génération JWT token
    // Redirection vers frontend
});

module.exports = router;

============================================================
FILE: backend/routes/reports.js
============================================================
// backend/routes/reports.js
const express = require('express');
const router = express.Router();
const db = require('../config/database');

// GET /api/reports - Liste des signalements
router.get('/', async (req, res) => {
    try {
        const result = await db.query(`
            SELECT r.*, c.first_name, c.last_name, c.current_position, u.full_name as reporter_name
            FROM reports r
            JOIN candidates c ON r.candidate_id = c.id
            JOIN users u ON r.user_id = u.id
            ORDER BY r.created_at DESC
        `);
        res.json(result.rows);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// POST /api/reports - Créer un signalement
router.post('/', async (req, res) => {
    try {
        const { candidate_id, user_id, reason, notes, tags, severity } = req.body;
        const result = await db.query(`
            INSERT INTO reports (candidate_id, user_id, reason, notes, tags, severity)
            VALUES ($1, $2, $3, $4, $5, $6)
            RETURNING *
        `, [candidate_id, user_id, reason, notes, JSON.stringify(tags), severity]);
        
        res.status(201).json(result.rows[0]);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;

============================================================
FILE: backend/package.json
============================================================
{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^17.2.1",
    "express": "^5.1.0",
    "helmet": "^8.1.0",
    "pg": "^8.16.3",
    "sequelize": "^6.37.7"
  },
  "devDependencies": {
    "jest": "^30.0.5",
    "nodemon": "^3.1.10"
  }
}


============================================================
FILE: backend/server.js
============================================================
// backend/server.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

app.use(helmet());
app.use(cors());
app.use(express.json());

// Routes de base
app.get('/', (req, res) => {
    res.json({ message: 'NoShow API Running' });
});

// Routes API
app.use('/api/auth', require('./routes/auth'));
app.use('/api/reports', require('./routes/reports'));
app.use('/api/users', require('./routes/users'));

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});