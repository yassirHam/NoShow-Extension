The following is a digest of the repository "NoShow-Extension.git".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: NoShow-Extension.git
Files Analyzed: 5
Total Text Size: 3.26 KB
Estimated Tokens (text only): ~997

--- DIRECTORY STRUCTURE ---
NoShow-Extension.git/
└── backend/
    ├── config/
    │   └── database.js
    ├── routes/
    │   ├── auth.js
    │   └── reports.js
    ├── package.json
    └── server.js


--- FILE CONTENTS ---
============================================================
FILE: backend/config/database.js
============================================================
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

module.exports = pool;

============================================================
FILE: backend/routes/auth.js
============================================================
// backend/routes/auth.js
const express = require('express');
const router = express.Router();

// Initier l'authentification LinkedIn
router.get('/linkedin', (req, res) => {
    const authUrl = `https://www.linkedin.com/oauth/v2/authorization?` +
        `response_type=code&` +
        `client_id=${process.env.LINKEDIN_CLIENT_ID}&` +
        `redirect_uri=${process.env.LINKEDIN_REDIRECT_URI}&` +
        `scope=r_liteprofile%20r_emailaddress`;
    res.redirect(authUrl);
});

// Callback OAuth
router.get('/linkedin/callback', async (req, res) => {
    // Échange du code contre un token
    // Récupération du profil utilisateur
    // Création/mise à jour de l'utilisateur en base
    // Génération JWT token
    // Redirection vers frontend
});

module.exports = router;

============================================================
FILE: backend/routes/reports.js
============================================================
// backend/routes/reports.js
const express = require('express');
const router = express.Router();
const db = require('../config/database');

// GET /api/reports - Liste des signalements
router.get('/', async (req, res) => {
    try {
        const result = await db.query(`
            SELECT r.*, c.first_name, c.last_name, c.current_position, u.full_name as reporter_name
            FROM reports r
            JOIN candidates c ON r.candidate_id = c.id
            JOIN users u ON r.user_id = u.id
            ORDER BY r.created_at DESC
        `);
        res.json(result.rows);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// POST /api/reports - Créer un signalement
router.post('/', async (req, res) => {
    try {
        const { candidate_id, user_id, reason, notes, tags, severity } = req.body;
        const result = await db.query(`
            INSERT INTO reports (candidate_id, user_id, reason, notes, tags, severity)
            VALUES ($1, $2, $3, $4, $5, $6)
            RETURNING *
        `, [candidate_id, user_id, reason, notes, JSON.stringify(tags), severity]);
        
        res.status(201).json(result.rows[0]);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;

============================================================
FILE: backend/package.json
============================================================
{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^17.2.1",
    "express": "^5.1.0",
    "helmet": "^8.1.0",
    "pg": "^8.16.3",
    "sequelize": "^6.37.7"
  },
  "devDependencies": {
    "jest": "^30.0.5",
    "nodemon": "^3.1.10"
  }
}


============================================================
FILE: backend/server.js
============================================================
// backend/server.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

app.use(helmet());
app.use(cors());
app.use(express.json());

// Routes de base
app.get('/', (req, res) => {
    res.json({ message: 'NoShow API Running' });
});

// Routes API
app.use('/api/auth', require('./routes/auth'));
app.use('/api/reports', require('./routes/reports'));
app.use('/api/users', require('./routes/users'));

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});